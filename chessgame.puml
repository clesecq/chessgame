
@startuml chess
' https://plantuml.com/class-diagram

skinparam style strictuml
skinparam ClassAttributeIconSize 0
skinparam ClassFontStyle bold

' constructeur à ajouter
' mouvement des pièces !!!
' aggrécation/composition -> nom des attributs
' type primaire exclusivement comeme attribut

package "model" {
    enum Color {
        WHITE
        BLACK
        - colorFrench : String {readOnly}
        Color(colorFrench : String)
        +getColorFrench()

    }

    class Position {
        - x: Integer {readOnly}
        - y: Integer {readOnly}
        + Position(x: Integer, y: Integer)
        + getPosition() : Integer[]
        + getRow() : Integer
        + getColumn()
        + getPiece() : Piece
        + setPiece(piece : Piece)
    }
    Position --* MoveObserver : <<use>>
    Position  --* "1" Piece : <<contains>>

    class Chessboard {
        - board : Position[]
        - capturedPiece : Piece[]
        + Chessboard()
        + addCapturedPiece( piece : Piece)
        + getBoard() : Position[]
   }
    Chessboard *-- "64..64" Position : <<contains>>
    Chessboard *-- "0..22" Piece : <<contains>>

    package "piece" {
        class Piece {
            -points : Integer
            -letter : String
            + Piece()
            + getColor() : Color
            + getPoints() : Integer
            + getLetter() : String
            + setStrategy(strategy: Strategy)
            + getMovements(currentPosition: Position) : Position[]
        }
        Piece *-- "1" Strategy : <<contains>>
        Piece *-- "1" Color : <<contains>>
        Piece o- "0..*" MoveObserver : <<observe>>


        interface Strategy <<interface>> {
            + getPoints() : Integer
            + getLetter() : String
            + getMovements() : Position[]
            + canCastling() : Boolean
        }

        class King implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Queen implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Rook implements Strategy {
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
            - castling : Boolean
        }
        class Bishop implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Knight implements Strategy {
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
            - castling : Boolean
        }
        class Pawn implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }

        class Factory {
            + createKing(color: Color) : Piece
            + createQueen(color: Color) : Piece
            + createRook(color: Color) : Piece
            + createBishop(color: Color) : Piece
            + createKnight(color: Color) : Piece
            + createPawn(color: Color) : Piece
        }

        King <.. Factory : <<use>>
        Queen <.. Factory : <<use>>
        Rook <.. Factory : <<use>>
        Bishop <.. Factory : <<use>>
        Knight <.. Factory : <<use>>
        Pawn <.. Factory : <<use>>

        Factory .> Piece : <<create>>
    }

    interface MoveObserver <<interface>> {
        + onMove(oldposition : Position, newposition : Position)
    }

    Chessboard ..> Factory : <<use>>
    class MoveObserver implements MoveObserver{
            + onMove(oldposition : Position, newposition : Position)
    }
    class CaptureObserver implements MoveObserver{
            +CaptureObserver(chessboard : Chessboard)
             + onMove(oldposition : Position, newposition : Position)
    }
    CaptureObserver --* Chessboard : <<contains>>

}


package "view" {
    class ChessboardView extends JFrame {
        + ChessboardView(party : Party)
        - createLabel( x : Integer, y : Integer ) : Jlabel
        + drawPosition( position : Position)
        + resetColor ( position : Position)
        - resetColor (label : Jlabel, x : Integer, y : Integer)
        + setColor ( position : Position, color : java.awt.Color)
        + getInstance() : ChessboardView
        - positionToIndex ( position : Position) : Integer
        - indexToLabel (index : Integer) : Jlabel
        - getLabel ( position : Position) : Jlabel
        }

}

package "controller" {
    class ChessMain() {
        + {static} main()
    }
    Player "2" --> "1" ChessboardView : <<contains>>

    class Player {
        - color : Color
        +Player(color: Color)
        + playTurn()
    }
        Player "1" --* "1"Color : <<use>>

    class CheckObserver implements MoveObserver {
        + update(old: Position, new: Position)
    }
    class Party {
    +Party()
    +getCurrentPlayer() : Color
    +ClikOnCase(x : Integer, y : Integer)

    }

    Party --* "1" Chessboard: <<contains>>
    Party --* ChessboardView : <<use>>
    Party --* "2"Color : <<contains>>
    Party --* Position : <<use>>
}

ChessboardView ..> Chessboard : <<use>>

@enduml
