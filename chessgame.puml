
@startuml chess
' https://plantuml.com/class-diagram

skinparam style strictuml
skinparam ClassAttributeIconSize 0
skinparam ClassFontStyle bold

package "model" {
    enum Color {
        WHITE
        BLACK
        NONE
    }

    class Position {
        - x: Integer {readOnly}
        - y: Integer {readOnly}
        + Position(x: Integer, y: Integer)
        + getPosition() : Integer[]
        + getRow() : Integer
        + getColumn() : Integer
        + getPiece() : Piece
        + setPiece(piece : Piece)
    }
    Position  --* "1" Piece : <<contains>> piece

    class Chessboard {
        + Chessboard()
        + addCapturedPiece( piece : Piece)
        + getBoard() : Position[]
        + movePiece( from : Position, to : Position)
   }
    Chessboard *-- "64..64" Position : <<contains>> board
    Chessboard *-- "0..22" Piece : <<contains>> capturedPiece
    Chessboard o- "0..*" MoveObserver : <<observe>> moveObservers

    package "piece" {
        class Piece {
            + Piece()
            + getColor() : Color
            + getPoints() : Integer
            + getLetter() : String

            + getMovements(x : Integer, y : Integer) : Integer[]
        }
        Piece *-- "1" Color : <<contains>> color

        interface PieceStrategy <<interface>> {
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class KingStrategy implements PieceStrategy{
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class QueenStrategy implements PieceStrategy{
            +getPoints() : Integer
            +getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class RookStrategy implements PieceStrategy {
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class BishopStrategy implements PieceStrategy{
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class KnightStrategy implements PieceStrategy {
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
            - castling : Boolean
        }

        class PawnStrategy implements PieceStrategy{
            + getPoints() : Integer
            + getLetter() : String
            + getMovements(x : Integer, y : Integer) : Integer[]
        }

        class FactoryStrategy {
            + createKingStrategy(color: Color) : Piece
            + createQueenStrategy(color: Color) : Piece
            + createRookStrategy(color: Color) : Piece
            + createBishopStrategy(color: Color) : Piece
            + createKnightStrategy(color: Color) : Piece
            + createPawnStrategy(color: Color) : Piece
        }

        KingStrategy <.. FactoryStrategy : <<use>>
        QueenStrategy <.. FactoryStrategy : <<use>>
        RookStrategy <.. FactoryStrategy : <<use>>
        BishopStrategy <.. FactoryStrategy : <<use>>
        KnightStrategy <.. FactoryStrategy : <<use>>
        PawnStrategy <.. FactoryStrategy : <<use>>

        FactoryStrategy .> Piece : <<create>>
    }

    interface MoveObserver <<interface>> {
         + beforeMove(oldPosition : Position, newPosition : Position)
         + afterMove(oldPosition : Position, newPosition : Position)
    }

    Chessboard ..> FactoryStrategy : <<use>>

    class CaptureObserver implements MoveObserver{
            + beforeMove(oldPosition : Position, newPosition : Position)
            + afterMove(oldPosition : Position, newPosition : Position)
    }
    CaptureObserver --* Chessboard : <<contains>>

}


package "view" {
    class ChessboardView extends JFrame {
        + ChessboardView()
        - createLabel(x: Integer, y: Integer) : JLabel
        + drawPosition(position: Position)
        - resetColor(label: JLabel, x: Integer, y: Integer)
        + setColor(position: Position, color: java.awt.Color)
        - positionToIndex(position: Position) : Integer
        - indexToLabel(index: Integer) : JLabel
        - getLabel(position: Position) : JLabel
        + resetAllBackground()
    }
    ChessboardView ..> Position : <<use>>
}

package "controller" {
    class ChessMain() {
        + {static} main()
    }

    class CheckObserver implements MoveObserver {
<<<<<<< HEAD
=======
        + update(oldPosition: Position, newPosition: Position)
>>>>>>> c28b182fb6e2c32945fac3792d66aadfbbafe913
    }

    class Party {
        + Party()
        + ClikOnCase(x : Integer, y : Integer)
    }

    Party --* "1" Chessboard: <<contains>> chessboard
    Party --* ChessboardView: <<use>> 
    Party --* "1" Color: <<contains>> currentColor
    Party --* Position: <<use>>
}


@enduml
