
@startuml chess
' https://plantuml.com/class-diagram

skinparam style strictuml
skinparam ClassAttributeIconSize 0
skinparam ClassFontStyle bold

' constructeur à ajouter
' mouvement des pièces !!!
' aggrécation/composition -> nom des attributs
' type primaire exclusivement comeme attribut

package "model" {
    enum Color {
        WHITE
        BLACK
        - colorFrench : String {readOnly}
        Color(colorFrench : String)
        +getColorFrench()

    }

    class Position {
        - x: Integer {readOnly}
        - y: Integer {readOnly}
        + Position(x: Integer, y: Integer)
        + move(oldPosition: Position, newPosition: Position)
        + getPiece() : Piece
    }

    class Chessboard {
        - Chessboard()
   }
    Chessboard *-- "64..64" Position : <<contains>>
    Chessboard *-- "0..22" Piece : <<contains>>

    package "piece" {
        class Piece {
            -points : Integer
            -letter : String
            + Piece()
            + getColor() : Color
            + getPoints() : Integer
            + getLetter() : String
            + setStrategy(strategy: Strategy)
            + getMovements(currentPosition: Position) : Position[]
        }
        Piece *-- "1" Strategy : <<contains>>
        Piece *-- "1" Color : <<contains>>
        Piece o-> "0..*" MovementObserver : <<observe>>


        interface Strategy <<interface>> {
            + getPoints() : Integer
            + getLetter() : String
            + getMovements() : Position[]
            + canCastling() : Boolean
        }

        class King implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Queen implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Rook implements Strategy {
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
            - castling : Boolean
        }
        class Bishop implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }
        class Knight implements Strategy {
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
            - castling : Boolean
        }
        class Pawn implements Strategy{
            +getPoints() : Integer
            +getLetter() : String
            +getMovements() : Position[]
        }

        class Factory {
            + createKing(color: Color) : Piece
            + createQueen(color: Color) : Piece
            + createRook(color: Color) : Piece
            + createBishop(color: Color) : Piece
            + createKnight(color: Color) : Piece
            + createPawn(color: Color) : Piece
        }

        King <.. Factory : <<use>>
        Queen <.. Factory : <<use>>
        Rook <.. Factory : <<use>>
        Bishop <.. Factory : <<use>>
        Knight <.. Factory : <<use>>
        Pawn <.. Factory : <<use>>

        Factory .> Piece : <<create>>
    }

    interface MovementObserver <<interface>> {
        + update(old: Position, new: Position)
    }

    Chessboard ..> Factory : <<use>>


    Position "0.1"--o "1" Piece : <<contains>>
}


package "view" {
    class ChessboardView {
        - chessboard : Chessboard
        - ChessboardView()
        + getInstance() : ChessboardView
        + draw()
        - case[]
    }

    class PieceObserver implements MovementObserver {
        + update(old: Position, new: Position)
    }
}

package "controller" {
    class ChessMain() {
        + {static} main()
    }
    Player "2" --> "1" ChessboardView : <<contains>>

    class Player {
        - color : Color
        +Player(color: Color)
        + playTurn()
    }

    class CheckObserver implements MovementObserver {
        + update(old: Position, new: Position)
    }

    Player "1" --* "1"Color : <<use>>
}

ChessboardView ..> Chessboard : <<use>>

@enduml
